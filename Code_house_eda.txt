# -*- coding: utf-8 -*-
"""House_EDA_(2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-zmwuvIn-taZ9fRGquocRgVMybHGAiQn
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# reading the csv file
df = pd.read_csv('/content/raw_house_data - raw_house_data.csv')

df

# fetching the number of rows(orientations) and columns(features)
rows = df.shape[0]
cols = df.shape[1]
print(rows,cols)

df.columns

# fetching the data types of columns
df.dtypes

# getting the statistics idea
df.describe()

#checking for the missing values
print(df.isnull().sum())

#Drop/removing  rows with missing values
clean_df = df.dropna()

clean_df

print(clean_df.duplicated().sum())
clean_df = clean_df.drop_duplicates()
clean_df.head(5)

#Converting the datatypes with suitable ones i.e. bathrooms, garage, fireplaces, HOA
clean_df['bathrooms'] = clean_df['bathrooms'].astype('int')
clean_df['garage'] = clean_df['garage'].astype('int')
clean_df['fireplaces'] = clean_df['fireplaces'].astype('int')

clean_df.dtypes

# Group data by 'bedrooms' and count the number of properties
bedroom_counts = clean_df['bedrooms'].value_counts().sort_index()

# Create a bar chart
plt.figure(figsize=(14, 6))
plt.bar(bedroom_counts.index, bedroom_counts.values, color='skyblue', alpha=0.8)
plt.title('Count of Properties by Number of Bedrooms')
plt.xlabel('Number of Bedrooms')
plt.ylabel('Count of Properties')
plt.xticks(bedroom_counts.index)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Filter the 'year_built' column to include only years between 1890 and 2020
filtered_data = clean_df[(clean_df['year_built'] >= 1890) & (clean_df['year_built'] <= 2020)]

# Group by decades
filtered_data['decade'] = (filtered_data['year_built'] // 10) * 10
decade_counts = filtered_data['decade'].value_counts().sort_index()

# Create the bar chart for decades
plt.figure(figsize=(12, 6))
plt.bar(decade_counts.index, decade_counts.values, color='skyblue', width=8)
plt.title('Distribution of Houses by Decade Built (1890 - 2020)', fontsize=16)
plt.xlabel('Decade Built', fontsize=12)
plt.ylabel('Number of Houses', fontsize=12)
plt.xticks(decade_counts.index, rotation=45, fontsize=10)
plt.tight_layout()

# Show the chart
plt.show()

# Group data by zipcode and bedrooms, then calculate max sold price
grouped_data = clean_df.groupby(['zipcode', 'bedrooms'])['sold_price'].max().reset_index()

# Create scatterplot
plt.figure(figsize=(10, 6))
plt.scatter(grouped_data['zipcode'], grouped_data['bedrooms'], c=grouped_data['sold_price'], cmap='viridis', s=100, alpha=0.7)
plt.colorbar(label='Max Sold Price')
plt.title('Scatterplot of Max Sold Price by Zipcode and Bedrooms')
plt.xlabel('Zipcode')
plt.ylabel('Bedrooms')
plt.grid(True)
plt.show()

clean_df.to_csv('raw-data-cleaned.csv')

